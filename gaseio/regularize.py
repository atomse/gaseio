"""
regularize arrays



"""

import numpy as np
import chemdata
import atomtools.geo
from ase.symbols import Symbols as ASESymbols


from .ext_types import ExtList
from . import ext_methods


def reg_customized_symbols(arrays):
    if 'customized_symbols' in arrays and not 'symbols' in arrays:
        arrays['symbols'] = ext_methods.regularize_symbols(arrays['customized_symbols'])


def reg_symbols(arrays):
    arrays['symbols'] = ext_methods.regularize_symbols(arrays['symbols'])


def reg_numbers_symbols(arrays):
    if 'numbers' in arrays:
        arrays['symbols'] = [chemdata.get_element(_) for _ in arrays['numbers']]
    else:
        assert 'symbols' in arrays, 'either numbers or symbols should be in the arrays'
        reg_symbols(arrays)
        arrays['numbers'] = np.array([chemdata.get_element_number(_) for _ in arrays['symbols']])
    arrays['symbols'] = ExtList(arrays['symbols'])
    arrays['numbers'] = np.array(arrays['numbers'])
    # set chemical_formula
    _symbols_obj = ASESymbols(arrays['numbers'])
    formula_modes = ['all', 'reduce', 'hill', 'metal']
    formula_content = [_symbols_obj.get_chemical_formula(mode) for mode in formula_modes]
    arrays['chemical_formula_dict'] = dict(zip(formula_modes, formula_content))
    arrays['chemical_formula'] = arrays['chemical_formula_dict']['hill']


def reg_masses(arrays):
    if not 'masses' in arrays:
        arrays['masses'] = np.array([chemdata.get_element_mass(x) for x in arrays['numbers']])


def reg_charge(arrays):
    if not 'charge' in arrays:
        arrays['charge'] = 0


def reg_spin(arrays):
    if 'multiplicity' in arrays:
        arrays['spin'] = int(arrays['multiplicity']) - 1
    if not 'spin' in arrays: # auto min spin
        arrays['spin'] = int(sum((arrays['numbers']) - arrays['charge'])) % 2
    arrays['multiplicity'] = arrays['spin'] + 1


def reg_comments(arrays):
    if not 'comments' in arrays:
        arrays['comments'] = 'Generated by GASEIO'
    elif isinstance(arrays['comments'], list):
        arrays['comments'] = ' '.join(arrays['comments'])


def reg_atoms_size(arrays):
    if 'positions' in arrays:
        atoms_size = atomtools.geo.get_atoms_size(arrays['positions'])
        arrays['atoms_size'] = atoms_size


def reg_pbc(arrays):
    if not 'pbc' in arrays:
        arrays['pbc'] = np.array([False] * 3)
    elif isinstance(arrays['pbc'], bool):
        arrays['pbc'] = np.array([arrays['pbc']] * 3)
    else:
        assert isinstance(arrays['pbc'], (tuple, list, np.ndarray))
        arrays['pbc'] = np.array(arrays['pbc'])
        assert arrays['pbc'].shape == (3,)


def reg_calc_arrays(arrays):
    if not 'calc_arrays' in arrays:
        arrays['calc_arrays'] = dict()


def reg_cell(arrays):
    if not 'cell' in arrays:
        arrays['cell'] = np.array([max(x, 21) for x in arrays['atoms_size']])
    if arrays['cell'].shape == (3, ):
        arrays['cell'] = np.diag(arrays['cell'])

def reg_constraints(arrays):
    if not 'constraints' in arrays:
        arrays['constraints'] = []


reg_functions = [
    reg_customized_symbols,
    reg_numbers_symbols,
    reg_masses,
    reg_charge,
    reg_spin,
    reg_comments,
    reg_atoms_size,
    reg_cell,
    reg_pbc,
    reg_calc_arrays,
    reg_constraints,
]


def regularize_arrays(arrays):
    if isinstance(arrays, list):
        for arr in arrays:
            regularize_arrays(arr)
        return
    for func in reg_functions:
        func(arrays)
